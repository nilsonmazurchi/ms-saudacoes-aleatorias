name: CI/CD - Saudações Aleatórias

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
  workflow_dispatch: # Permite o acionamento manual
  
env:
  DOCKER_USER: nilsonmazurchi
  SERVICE_NAME: saudacoes-aleatorias

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5

      - name: Go Fmt & Vet
        run: |
          echo "Linting code..."
          go fmt $(go list ./...)
          go vet $(go list ./...)

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          args: --verbose

  test:
    name: Test Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Run tests and generate report
        run: |
          echo "Running tests and generating report..."
          # CGO_ENABLED=1 é necessário se houver código C, mas requer gcc.
          # A imagem ubuntu-latest já tem o gcc.
          CGO_ENABLED=1 gotestsum --junitfile report.xml --format testname

  build-and-push:
    name: Build and Push Docker Image
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    outputs:
      docker_image_name: ${{ steps.set-outputs.outputs.docker_image_name }}
      docker_image_tag: ${{ steps.set-outputs.outputs.docker_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_USER }}/ms-${{ env.SERVICE_NAME }}:1.0.${{ github.run_id }}
            ${{ env.DOCKER_USER }}/ms-${{ env.SERVICE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_USER }}/ms-${{ env.SERVICE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set outputs
        id: set-outputs
        run: |
          echo "docker_image_name=${{ env.DOCKER_USER }}/ms-${{ env.SERVICE_NAME }}" >> $GITHUB_OUTPUT
          echo "docker_image_tag=1.0.${{ github.run_id }}" >> $GITHUB_OUTPUT

  # Job para fazer o deploy da aplicação
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=infra init
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

      - name: Terraform Validate
        run: terraform -chdir=infra validate

      - name: Debug outputs
        run: |
          echo "Docker Image Name: ${{ needs.build-and-push.outputs.docker_image_name }}"
          echo "Docker Image Tag: ${{ needs.build-and-push.outputs.docker_image_tag }}"

      - name: Terraform Apply
        run: terraform -chdir=infra apply -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
          TF_VAR_docker_image_name: ${{ needs.build-and-push.outputs.docker_image_name }}
          TF_VAR_docker_image_tag: ${{ needs.build-and-push.outputs.docker_image_tag }}
